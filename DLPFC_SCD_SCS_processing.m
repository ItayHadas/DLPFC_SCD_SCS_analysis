% tcsh BrainStorm.csh
% matlab -nodesktop -r "workspace"

clear all

if (ispc)
    sep='\';
    not_sep='/';
    rep_space = ' ';
    GITS='D:\GITs\';
    Path = dir('\\ad.ucsd.edu\ahs\apps\INTERPSYC\DATA\Wellcome_Leap_802232\Neurophysiology_Data\**\*SPD_*.cdt');
    outdir='A:\WorkingSet\WellcomeLeap_TEP';
elseif (ismac || isunix)
    sep='/';
    not_sep='\';
    rep_space = '\ ';
    GITS='/media/ipp/DATA/GITs';
    eeglabdir='/media/ipp/DATA/Documents/MATLAB/eeglab-2023.1/'; 
    brainstormdir='/media/ipp/DATA/Documents/MATLAB/brainstorm3';
    % preprocessdir='/media/ipp/Data/EEG_DATA/ECT_TEP/';
    % outdir='/media/ipp/Data/EEG_DATA/ECT_SCS/';
    %preprocessdir='/media/ipp/Data/EEG_DATA/rTMS_Blumberger2018_TEP/';
    preprocessdir='/media/ipp/DATA/EEG_DATA/WL_TEP/';
    outdir='/media/ipp/Data/EEG_DATA/WellcomeLeap_SCS_2ndrun/'; 
    mkdir(outdir)
    mkdir(preprocessdir)
    Path = dir([preprocessdir '/**/*.set']); % {Path.name}'
end  
addpath('/media/ipp/DATA/GITs/Localization/','/media/ipp/DATA/GITs/TMS-EEG/' )
addpath(eeglabdir); eeglab nogui
addpath(brainstormdir);
fileNames={Path.name};

brainsto_data=['/media/ipp/DATA/Brainstorm_database'];
ProtocolName='WellcomeLeap_INTER_SCS'; % ProtocolName='ECT2017_SCD';
load([GITS '/TMS-EEG/chanlocs_standard_1005_62chan.mat']);
%chanlocs62=chanlocs69;
Subloc=[1:6];
baseline=[-1.45, -0.15]; % for ECT baseline=[-1.7, -0.4]; % for WL baseline=[-1.7, -0.4];
sigtime=[-0.5, 0.8]; % for ECT sigtime=[-0.5, 0.8];% for WL baseline=[-0.5, 0.8];
AtlasScts={'Destrieux', {'G_front_middle L', 'G_front_middle R', 'G_subcallosal L', 'G_subcallosal R'}};
cd(brainstormdir)
if ~brainstorm('status')
    brainstorm nogui
end
cd(outdir)
iProtocol = bst_get('Protocol', ProtocolName);
if isempty(iProtocol)
    warning(['Creating new protocol: ' ProtocolName]);
    % Create new protocol
    gui_brainstorm('CreateProtocol', ProtocolName, 0, 0);
else
    gui_brainstorm('SetCurrentProtocol', iProtocol);
end

fileNames={Path.name}';
idx=1:size(fileNames,1);
for i= idx

    fileName=fileNames{i};
    pathName=[Path(i).folder sep];
    disp([ 'Loading ' num2str(i) ' out of ' num2str(size(fileNames,1)) '   -   ' fileName ])
    EEG = pop_loadset( [pathName fileName]);
    nn=[EEG.times(find(isnan(EEG.data(2,:,2))))];
    if ~isempty(nn)
    EEG = Triminterp(EEG,[min(nn)-1 max(nn)+1]);
    end
    %EEG = pop_chanedit(EEG, 'lookup',[eeglabdir sep 'plugins' sep 'dipfit' sep...
    %'standard_BEM' sep 'elec' sep 'standard_1005.elc']);
    EEG = pop_interp(EEG, chanlocs62, 'spherical');
    remove_channels= {  'lz' 'VEO' 'HEO' 'VEOG' 'HEOG' ...
    'EKG' 'EMG' 'EOG' 'HL 1' 'HL 2' 'Trigger'}; %'M1' 'M2' 'FT8' 'FT7' 'PO5' 'PO6' 'CB1' 'CB2'
    EEG = pop_select( EEG,'nochannel',remove_channels);
    EEG.filename=fileName;
    EEG.subject=EEG.filename(Subloc);
    if strcmpi(fileName(:,end-3:end),'vhdr')
        EEG.setname=EEG.filename(1:end-5);
    else
        EEG.setname=EEG.filename(1:end-4);
    end
    % pop_eegplot( EEG, 1, 1, 1);
    if contains(EEG.setname,'pre','IgnoreCase',true) | contains(EEG.setname,'BL','IgnoreCase',true)
        EEG.condition='pre';
        EEG.session='1';
    elseif contains(EEG.setname,'post','IgnoreCase',true) | contains(EEG.setname,'post','IgnoreCase',true)
        EEG.condition='post';
        EEG.session='2';
    end
    if contains(EEG.filename,'_SP_','IgnoreCase',true)
        EEG.condition=[EEG.condition '_SP']; 
    elseif contains(EEG.filename,'_SP2_','IgnoreCase',true)
        EEG.condition=[EEG.condition '_SP2'];
    end
    EEG = pop_saveset( EEG, [outdir fileName]);
    condi=EEG.condition
    clear EEG;

    %% brainstorm files and folders
    SubjectName =  {fileName(Subloc)}; %{  'NewSubject'};
    SubjectNamestr=fileName(Subloc);

    RawFiles = {[outdir fileName]};
    % '005/MDD_PRE_SP/data_Neuroscan_EEG_data_resampled_pruned_with_ICA_pruned_with_ICA_(_average_171128_1725.mat'};
    brnstmPATH= [brainsto_data sep ProtocolName sep 'data' sep SubjectNamestr sep condi sep];
    
    sFiles =[];
    %% Process: Import MEG/EEG: Existing epochs
    sFiles = bst_process('CallProcess', 'process_import_data_epoch', sFiles, [], ...
        'subjectname',  SubjectName{1}, ...
        'condition',    condi, ...
        'datafile',     {{RawFiles{1}}, 'EEG-EEGLAB'}, ...
        'iepochs',      [], ...
        'eventtypes',   '', ...
        'createcond',   0, ...
        'channelalign', 0, ...
        'usectfcomp',   1, ...
        'usessp',       1, ...
        'freq',         [], ...
        'baseline',     [], ...
        'blsensortypes', 'EEG');

        % Process: Set channel file
        sFiles = bst_process('CallProcess', 'process_channel_addloc', sFiles, [], ...
        'channelfile', {'', ''}, ...
        'usedefault',  'ICBM152: Neuroscan Quik-cap 68', ...  % ICBM152: Neuroscan Quik-cap 68
        'fixunits',    1, ...
        'vox2ras',     1, ...
        'mrifile',     {'', ''}, ...
        'fiducials',   []);

    % sFiles = bst_process('CallProcess', 'process_import_channel', sFiles, [], ...
    %     'channelfile',  {'', ''}, ...
    %     'usedefault',   71, ...  % ICBM152: BrainProducts EasyCap 64
    %     'channelalign', 1, ...
    %     'fixunits',     1, ...
    %     'vox2ras',      1);

    Org_sFiles=sFiles;
    sFiles = bst_process('CallProcess', 'process_extract_time', Org_sFiles, [], ...
        'timewindow', sigtime, ...
        'overwrite',  0);
        
    after15_615=  sFiles ;
    %% Process: Select data files in: Subject01/*/Avg: deviant
    sFiles = bst_process('CallProcess', 'process_select_files_data', sFiles, [], ...
        'subjectname',   SubjectName{1}, ...
        'condition',     condi, ...
        'tag',           '', ...  %Avg: deviant
        'includebad',    0, ...
        'includeintra',  0, ...
        'includecommon', 0);

    %% Process: Extract time: [-850ms,-215ms]
    sFiles= Org_sFiles;
    sFiles = bst_process('CallProcess', 'process_extract_time', sFiles, [], ...
        'timewindow', baseline, ...
        'overwrite',  0);
    before950_350=  sFiles ;
        
    sFiles = bst_process('CallProcess', 'process_select_files_data', sFiles, [], ...
        'subjectname',   SubjectName{1}, ...
        'condition',     '', ...
        'tag',           '', ...  %Avg: deviant
        'includebad',    0, ...
        'includeintra',  0, ...
        'includecommon', 0);

    AllsFiles=  table2struct([struct2table(Org_sFiles) ; struct2table(before950_350) ; struct2table(after15_615)]);
    sFiles=AllsFiles;
    % Process: Compute head model
    sFiles = bst_process('CallProcess', 'process_headmodel', sFiles, [], ...
        'Comment',     '', ...
        'sourcespace', 1, ...  % Cortex surface
        'meg',         1, ...  % 
        'eeg',         2, ...  % 3-shell sphere
        'ecog',        1, ...  % 
        'seeg',        1, ...  % 
        'channelfile', '');
    AllsFiles=sFiles;
    
    % Process: Compute covariance (noise or data)
    sFiles = bst_process('CallProcess', 'process_noisecov', {AllsFiles.FileName}, [], ...
            'baseline',       [baseline(1), baseline(2)], ...
            'datatimewindow', [0.020, 0.5], ...
            'sensortypes',    'EEG', ...
            'target',         1, ...  % Noise covariance     (covariance over baseline time window)
            'dcoffset',       1, ...  % Block by block, to avoid effects of slow shifts in data
            'identity',       0, ...
            'copycond',       0, ...
            'copysubj',       0, ...
            'copymatch',      0, ...
            'replacefile',    1);  % Replace

    srcFiles1 = bst_process('CallProcess', 'process_inverse_2018', {Org_sFiles.FileName}, [], ...
        'output',  2, ...  % Kernel only: shared
        'inverse', struct(...
        'Comment',        'MN: EEG', ...
        'InverseMethod',  'minnorm', ...
        'InverseMeasure', 'amplitude', ...
        'SourceOrient',   {{'fixed'}}, ...
        'Loose',          0.2, ...
        'UseDepth',       1, ...
        'WeightExp',      0.5, ...
        'WeightLimit',    10, ...
        'NoiseMethod',    'reg', ...
        'NoiseReg',       0.1, ...
        'SnrMethod',      'fixed', ...
        'SnrRms',         1e-06, ...
        'SnrFixed',       3, ...
        'ComputeKernel',  1, ...
        'DataTypes',      {{'EEG'}}));

    srcFiles_baseline = bst_process('CallProcess', 'process_inverse_2018', {before950_350.FileName}, [], ...
        'output',  2, ...  % Kernel only: shared
        'inverse', struct(...
        'Comment',        'MN: EEG', ...
        'InverseMethod',  'minnorm', ...
        'InverseMeasure', 'amplitude', ...
        'SourceOrient',   {{'fixed'}}, ...
        'Loose',          0.2, ...
        'UseDepth',       1, ...
        'WeightExp',      0.5, ...
        'WeightLimit',    10, ...
        'NoiseMethod',    'reg', ...
        'NoiseReg',       0.1, ...
        'SnrMethod',      'fixed', ...
        'SnrRms',         1e-06, ...
        'SnrFixed',       3, ...
        'ComputeKernel',  1, ...
        'DataTypes',      {{'EEG'}}));
        
    srcFiles_signal = bst_process('CallProcess', 'process_inverse_2018', {after15_615.FileName}, [], ...
        'output',  2, ...  % Kernel only: shared
        'inverse', struct(...
        'Comment',        'MN: EEG', ...
        'InverseMethod',  'minnorm', ...
        'InverseMeasure', 'amplitude', ...
        'SourceOrient',   {{'fixed'}}, ...
        'Loose',          0.2, ...
        'UseDepth',       1, ...
        'WeightExp',      0.5, ...
        'WeightLimit',    10, ...
        'NoiseMethod',    'reg', ...
        'NoiseReg',       0.1, ...
        'SnrMethod',      'fixed', ...
        'SnrRms',         1e-06, ...
        'SnrFixed',       3, ...
        'ComputeKernel',  1, ...
        'DataTypes',      {{'EEG'}}));

    %Process: Scouts time series: G_front_middle L G_front_middle R G_subcallosal L G_subcallosal R
    actfiles = bst_process('CallProcess', 'process_extract_scout', {srcFiles1.FileName}, [], ...
        'timewindow',     sigtime, ...
        'scouts',         AtlasScts, ...
        'scoutfunc',      5, ...  % All
        'isflip',         1, ...
        'isnorm',         1, ...
        'concatenate',    0, ...
        'save',           1, ...
        'addrowcomment',  1, ...
        'addfilecomment', 1);

    % basfiles = bst_process('CallProcess', 'process_extract_scout', {srcFiles1.FileName}, [], ...
    %     'timewindow',     baseline, ...
    %     'scouts',         AtlasScts, ...
    %     'scoutfunc',      5, ...  % All
    %     'isflip',         1, ...
    %     'isnorm',         1, ...
    %     'concatenate',    0, ...
    %     'save',           1, ...
    %     'addrowcomment',  1, ...
    %     'addfilecomment', 1);
        
    % Process: Average: By subject
    ScoutActFile = bst_process('CallProcess', 'process_average', {actfiles.FileName}, [], ...
        'avgtype',       2, ...  % By subject
        'avg_func',      1, ...  % Arithmetic average:  mean(x)
        'weighted',      0, ...
        'keepevents',    0, ...
        'matchrows',     1, ...
        'iszerobad',     1);
    
    perm_1tail_SGC = bst_process('CallProcess', 'process_test_permutation2p', {srcFiles_signal.FileName}, {srcFiles_baseline.FileName}, ...
        'timewindow',     [], ...
        'scoutsel',       {AtlasScts{1}, AtlasScts{2}(:,3:4)}, ... {'Yeo 7 Networks', {'Visual_L', 'Visual_R', 'Somatomotor_L', 'Somatomotor_R', 'Dorsal_Attention_L', 'Dorsal_Attention_R', 'Ventral_Attention_L', 'Ventral_Attention_R', 'Limbic_L', 'Limbic_R', 'FrontoParietal_L', 'FrontoParietal_R', 'DefaultModeNetwork_L', 'DefaultModeNetwork_R'}}, ...
        'scoutfunc',      5, ...  % all
        'isnorm',         0, ...
        'avgtime',        0, ...
        'iszerobad',      1, ...
        'Comment',        '', ...
        'test_type',      'ttest_unequal', ...  % Student's t-test   (unequal variance) t = (mean(A)-mean(B)) / sqrt(var(A)/nA + var(B)/nB)
        'randomizations', 1000, ...
        'tail',           'one+');  % one-tailed
        
    perm_1tail_L_DLPFC = bst_process('CallProcess', 'process_test_permutation2p', {srcFiles_signal.FileName}, {srcFiles_baseline.FileName}, ...
        'timewindow',     [], ...
        'scoutsel',       {AtlasScts{1}, {'G_front_middle L'}}, ... {'Yeo 7 Networks', {'Visual_L', 'Visual_R', 'Somatomotor_L', 'Somatomotor_R', 'Dorsal_Attention_L', 'Dorsal_Attention_R', 'Ventral_Attention_L', 'Ventral_Attention_R', 'Limbic_L', 'Limbic_R', 'FrontoParietal_L', 'FrontoParietal_R', 'DefaultModeNetwork_L', 'DefaultModeNetwork_R'}}, ...
        'scoutfunc',      5, ...  % all
        'isnorm',         0, ...
        'avgtime',        0, ...
        'iszerobad',      1, ...
        'Comment',        '', ...
        'test_type',      'ttest_unequal', ...  % Student's t-test   (unequal variance) t = (mean(A)-mean(B)) / sqrt(var(A)/nA + var(B)/nB)
        'randomizations', 1000, ...
        'tail',           'one+');  % one-tailed

    perm_1tail_R_DLPFC = bst_process('CallProcess', 'process_test_permutation2p', {srcFiles_signal.FileName}, {srcFiles_baseline.FileName}, ...
        'timewindow',     [], ...
        'scoutsel',       {AtlasScts{1}, {'G_front_middle R'}}, ... {'Yeo 7 Networks', {'Visual_L', 'Visual_R', 'Somatomotor_L', 'Somatomotor_R', 'Dorsal_Attention_L', 'Dorsal_Attention_R', 'Ventral_Attention_L', 'Ventral_Attention_R', 'Limbic_L', 'Limbic_R', 'FrontoParietal_L', 'FrontoParietal_R', 'DefaultModeNetwork_L', 'DefaultModeNetwork_R'}}, ...
        'scoutfunc',      5, ...  % all
        'isnorm',         0, ...
        'avgtime',        0, ...
        'iszerobad',      1, ...
        'Comment',        '', ...
        'test_type',      'ttest_unequal', ...  % Student's t-test   (unequal variance) t = (mean(A)-mean(B)) / sqrt(var(A)/nA + var(B)/nB)
        'randomizations', 1000, ...
        'tail',           'one+');  % one-tailed

    clear b f loc timedata_avg;
    a=dir(brnstmPATH);

    loc=strfind(ScoutActFile.FileName,sep);
    f=ScoutActFile.FileName(loc(end)+1:end);
    timedata_avg = load( [brnstmPATH f]);
    clear b f1 f loc head;

    % brainstorm variable load
    head=load([brnstmPATH 'headmodel_surf_eeg_3sphereberg.mat']);
    sensor=load([brnstmPATH 'channel.mat']);
    cortex=load([brainsto_data sep ProtocolName sep 'anat' sep '@default_subject' sep 'tess_cortex_pial_low.mat']);
    total_sources=size(cortex.Vertices,1);

    %prapering stats structure
    ee=strfind(perm_1tail_SGC.FileName,sep);
    f=a(contains({a.name},perm_1tail_SGC.FileName(ee(end)+1:end))).name;
    pmat= load( [brnstmPATH f]);
    Permutation_test.SGC.scouts1=pmat.Description;
    Permutation_test.SGC.tail1.pmap=pmat.pmap;
    Permutation_test.SGC.tail1.time=pmat.Time;
    Permutation_test.SGC.tail1.tmap=pmat.tmap;

    ee=strfind(perm_1tail_L_DLPFC.FileName,sep);
    f=a(contains({a.name},perm_1tail_L_DLPFC.FileName(ee(end)+1:end))).name;
    pmat= load( [brnstmPATH f]);
    Permutation_test.L_DLPFC.scouts1=pmat.Description;
    Permutation_test.L_DLPFC.tail1.pmap=pmat.pmap;
    Permutation_test.L_DLPFC.tail1.time=pmat.Time;
    Permutation_test.L_DLPFC.tail1.tmap=pmat.tmap;

    ee=strfind(perm_1tail_R_DLPFC.FileName,sep);
    f=a(contains({a.name},perm_1tail_R_DLPFC.FileName(ee(end)+1:end))).name;
    pmat= load( [brnstmPATH f]);
    Permutation_test.R_DLPFC.scouts1=pmat.Description;
    Permutation_test.R_DLPFC.tail1.pmap=pmat.pmap;
    Permutation_test.R_DLPFC.tail1.time=pmat.Time;
    Permutation_test.R_DLPFC.tail1.tmap=pmat.tmap;

    % ee=strfind(Basettest.FileName,sep);
    % f=a(contains({a.name},Basettest.FileName(ee(end)+1:end))).name;
    % pmat= load( [brnstmPATH f]);
    % Permutation_test.SGC_DLPFC.scoutstt=pmat.Description;
    % Permutation_test.SGC_DLPFC.tailtt.pmap=pmat.pmap;
    % Permutation_test.SGC_DLPFC.tailtt.time=pmat.Time;
    % Permutation_test.SGC_DLPFC.tailtt.tmap=pmat.tmap;
    
    clear pmat f ee

    %% preparing anatomy data and variables
    chanlocs = sensor.Channel;
    sourcelocs = head.GridLoc;
    chan_stim = find(strcmpi({sensor.Channel.Name},'F3'));
    x_stim = chanlocs(1,chan_stim).Loc(1);
    y_stim = chanlocs(1,chan_stim).Loc(2);
    z_stim = chanlocs(1,chan_stim).Loc(3);

    dist_stim=[];
    for source_num = 1:total_sources
        x_source = sourcelocs(source_num,1);
        y_source = sourcelocs(source_num,2);
        z_source = sourcelocs(source_num,3);
        dist_stim(source_num) = sqrt((x_source-x_stim)^2+(y_source-y_stim)^2+(z_source-z_stim)^2);
    end
    
    atlas='Destrieux'; atlas=find(contains({cortex.Atlas.Name},atlas));
    scoutatlas={cortex.Atlas(1,atlas).Scouts(1,:).Label}';

    vertlabel=zeros(1,total_sources); vertlabelnames=cell(1,total_sources);
    for s = 1:size(AtlasScts{:,2},2)
        vertlabel(cortex.Atlas(1, atlas).Scouts(1, find(contains({cortex.Atlas(1, atlas).Scouts(1, :).Label},AtlasScts{:,2}(s)))).Vertices)=find(strcmp(scoutatlas,AtlasScts{:,2}(s)));
        vertlabelnames(cortex.Atlas(1, atlas).Scouts(1, find(contains({cortex.Atlas(1, atlas).Scouts(1, :).Label},AtlasScts{:,2}(s)))).Vertices)={AtlasScts{:,2}{s}};
    end

    %% Using imported statistical values
    [~, zero] = min(abs(Permutation_test.SGC.tail1.time-(sigtime(1))));
    [~, eigh] = min(abs(Permutation_test.SGC.tail1.time-(sigtime(2))));
    pmap1_SGC=Permutation_test.SGC.tail1.pmap(:,zero:eigh);
    %
    [~, zero] = min(abs(Permutation_test.L_DLPFC.tail1.time-(sigtime(1))));
    [~, eigh] = min(abs(Permutation_test.L_DLPFC.tail1.time-(sigtime(2))));
    pmap1_L_DLPFC=Permutation_test.L_DLPFC.tail1.pmap(:,zero:eigh);
    %
    [~, zero] = min(abs(Permutation_test.R_DLPFC.tail1.time-(sigtime(1))));
    [~, eigh] = min(abs(Permutation_test.R_DLPFC.tail1.time-(sigtime(2))));
    pmap1_R_DLPFC=Permutation_test.R_DLPFC.tail1.pmap(:,zero:eigh);
    %
    % [~, zero] = min(abs(Permutation_test.SGC_DLPFC.tailtt.time-(sigtime(1))));
    % [~, eigh] = min(abs(Permutation_test.SGC_DLPFC.tailtt.time-(sigtime(2))));
    % pmaptt_SGC_DLPFC=Permutation_test.SGC_DLPFC.tailtt.pmap(:,zero:eigh);

    [~, SS1_SGC]=fdr(pmap1_SGC,0.05);
    [~, SS1_L_DLPFC]=fdr(pmap1_L_DLPFC,0.05);
    [~, SS1_R_DLPFC]=fdr(pmap1_R_DLPFC,0.05);
    % [~, SStt_SGC_DLPFC]=fdr(pmaptt_SGC_DLPFC,0.05);

    timevec = timedata_avg.Time;
    [~, zero] = min(abs(timevec-(sigtime(1))));
    [~, eigh] = min(abs(timevec-(sigtime(2))));
    timevec=timevec([zero:eigh]);

    %% Calculate SCD and SCS measures
    J_SGC=sum(abs(timedata_avg.Value(find(contains(timedata_avg.Description,'G_subcallosal')),[zero:eigh])),1);
    J_L_DLPFC=sum(abs(timedata_avg.Value(find(contains(timedata_avg.Description,'G_front_middle L')),[zero:eigh])),1);
    J_R_DLPFC=sum(abs(timedata_avg.Value(find(contains(timedata_avg.Description,'G_front_middle R')),[zero:eigh])),1);
    % plot(timevec*1000,J_L_DLPFC), hold on, plot(timevec*1000,J_R_DLPFC) ,hold off
    SCD1_SGC=sum(abs(timedata_avg.Value(find(contains(timedata_avg.Description,'G_subcallosal')),[zero:eigh])).*SS1_SGC,1);
    %SCDtt_SGC=sum(abs(timedata_avg.Value(find(contains(timedata_avg.Description,'G_subcallosal')),[zero:eigh])).*...
        %SStt_SGC_DLPFC(find(contains(Permutation_test.SGC_DLPFC.scoutstt,'G_subcallosal')),:),1);
    % figure;plot(timevec*1000,SCD1_SGC), hold on, plot(timevec*1000,SCD2_SGC) , plot(timevec*1000,SCDtt_SGC) ,hold off
    SCD1_L_DLPFC=sum(abs(timedata_avg.Value(find(contains(timedata_avg.Description,'G_front_middle L')),[zero:eigh])).*SS1_L_DLPFC,1);
    %SCDtt_L_DLPFC=sum(abs(timedata_avg.Value(find(contains(timedata_avg.Description,'G_front_middle L')),[zero:eigh])).*...
        %SStt_SGC_DLPFC(find(contains(Permutation_test.SGC_DLPFC.scoutstt,'G_front_middle L')),:),1);
    %figure; plot(timevec*1000,SCD1_L_DLPFC), hold on, plot(timevec*1000,SCD2_L_DLPFC) , plot(timevec*1000,SCDtt_L_DLPFC) ,hold off
    SCD1_R_DLPFC=sum(abs(timedata_avg.Value(find(contains(timedata_avg.Description,'G_front_middle R')),[zero:eigh])).*SS1_R_DLPFC,1);
    %SCDtt_R_DLPFC=sum(abs(timedata_avg.Value(find(contains(timedata_avg.Description,'G_front_middle R')),[zero:eigh])).*...
        %SStt_SGC_DLPFC(find(contains(Permutation_test.SGC_DLPFC.scoutstt,'G_front_middle R')),:),1);
    %figure; plot(timevec*1000,SCD1_R_DLPFC), hold on, plot(timevec*1000,SCD2_R_DLPFC) , plot(timevec*1000,SCDtt_R_DLPFC) ,hold off
    SCS1_SGC=sum(repmat(dist_stim([cortex.Atlas(atlas).Scouts(find(contains({cortex.Atlas(atlas).Scouts.Label},'G_subcallosal'))).Vertices])',1,size(SS1_SGC,2))...
        .*SS1_SGC,1);
    %SCStt_SGC=sum(repmat(dist_stim([cortex.Atlas(atlas).Scouts(find(contains({cortex.Atlas(atlas).Scouts.Label},'G_subcallosal'))).Vertices])',1,size(SS1_SGC,2))...
        %.*SStt_SGC_DLPFC(find(contains(Permutation_test.SGC_DLPFC.scoutstt,'G_subcallosal')),:),1);
    %figure; plot(timevec*1000,SCS1_SGC), hold on, plot(timevec*1000,SCS2_SGC) , plot(timevec*1000,SCStt_SGC) ,hold off
    SCS1_L_DLPFC=sum(repmat(dist_stim([cortex.Atlas(atlas).Scouts(find(contains({cortex.Atlas(atlas).Scouts.Label},'G_front_middle L'))).Vertices])',1,size(SS1_L_DLPFC,2))...
        .*SS1_L_DLPFC,1);
    %SCStt_L_DLPFC=sum(repmat(dist_stim([cortex.Atlas(atlas).Scouts(find(contains({cortex.Atlas(atlas).Scouts.Label},'G_front_middle L'))).Vertices])',1,size(SS1_L_DLPFC,2))...
        %.*SStt_SGC_DLPFC(find(contains(Permutation_test.SGC_DLPFC.scoutstt,'G_front_middle L')),:),1);
    %figure; plot(timevec*1000,SCS1_L_DLPFC), hold on, plot(timevec*1000,SCS2_L_DLPFC) , plot(timevec*1000,SCStt_L_DLPFC) ,hold off
    SCS1_R_DLPFC=sum(repmat(dist_stim([cortex.Atlas(atlas).Scouts(find(contains({cortex.Atlas(atlas).Scouts.Label},'G_front_middle R'))).Vertices])',1,size(SS1_R_DLPFC,2))...
        .*SS1_R_DLPFC,1);
    %SCStt_R_DLPFC=sum(repmat(dist_stim([cortex.Atlas(atlas).Scouts(find(contains({cortex.Atlas(atlas).Scouts.Label},'G_front_middle R'))).Vertices])',1,size(SS1_R_DLPFC,2))...
        %.*SStt_SGC_DLPFC(find(contains(Permutation_test.SGC_DLPFC.scoutstt,'G_front_middle R')),:),1);
    %figure; plot(timevec*1000,SCS1_R_DLPFC), hold on, plot(timevec*1000,SCS2_R_DLPFC) , plot(timevec*1000,SCStt_R_DLPFC) ,hold off
    
    %% Saves the DATA
    save ([outdir SubjectNamestr '_' condi '_SGC-DLPFC_J_SCD_SCS_' date '.mat'],...
        'J_SGC', 'J_L_DLPFC', 'J_R_DLPFC',...
        'SCD1_SGC', 'SCD1_L_DLPFC', 'SCD1_R_DLPFC',...
        'SCS1_SGC', 'SCS1_L_DLPFC', 'SCS1_R_DLPFC',...
            'SS1_SGC', 'SS1_L_DLPFC', 'SS1_R_DLPFC', 'timevec');
        save ([outdir SubjectNamestr '_' condi '_SGC-DLPFC_scouts_activation_' date '.mat'],'timedata_avg');
        %'SCDtt_SGC', 'SCDtt_R_DLPFC',SCStt_SGC', 'SCStt_L_DLPFC', 'SCStt_R_DLPFC', 
        clearvars -except fileNames i iProtocol AtlasScts baseline sigtime Path preprocessdir outdir GITS eeglabdir sep not_sep rep_space condi brainsto_data ProtocolName chanlocs62 Subloc
    end
    brainstorm stop
    close all
    fclose('all')
    
    %%%%%%%%%%%% stats
    %% creating a table
    %% Theta dose GRAND averaging
    
    % tcsh BrainStorm.csh
    % matlab -nodesktop -r "workspace"
    
    clear all
    addpath('/media/ipp/DATA/GITs/Localization/','/media/ipp/DATA/GITs/TMS-EEG/' )
    outdir='/media/ipp/Data/EEG_DATA/WellcomeLeap_SCS_2ndrun/';
    % outdir='/media/ipp/Data/EEG_DATA/MST_SCS_NEW/';
    %outdir='/media/ipp/Data/EEG_DATA/rTMS_SCS/'; outdir='/media/ipp/Data/EEG_DATA/ECT_SCS/'
cd(outdir)

%[fileNames, pathName]=Z_getSetsFileNames('mat'); 
folder=dir([outdir '/**/*J_SCD_SCS*.mat']);
fileNames={folder.name}';
datatable=table; 
for uuu=1:size(fileNames,1)
    data=load([outdir fileNames{uuu}]);
    dt=table;
    dt{1,1}={fileNames{uuu}(1:6)};
    floc=strfind(fileNames{uuu},'_');
    dt{1,2}={fileNames{uuu}(floc(1)+1:floc(2)-1)};
    dt= [dt struct2table(rmfield(data,{'SS1_L_DLPFC','SS1_R_DLPFC','SS1_SGC'}))];
    dt.Properties.VariableNames(1)={'Subject'};
    dt.Properties.VariableNames(2)={'Stage'};
    datatable=[datatable ; dt];
end
save([outdir 'grand_average_SCD_SCS'],'datatable')
%load([outdir 'grand_average_SCD_SCS.mat'])